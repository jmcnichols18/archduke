
buildscript {
    ext.cubaVersion = '6.4.0'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"

        classpath "com.haulmont.cuba:cuba-global:$cubaVersion"

        
    }
}

def globalModule = project(':app-global')
def webThemesModule= project(':app-web-themes')
def coreModule = project(':app-core')
def guiModule = project(':app-gui')
def webModule = project(':app-web')
def webToolkitModule = project(':app-web-toolkit')

def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'


apply(plugin: 'java')
apply(plugin: 'eclipse')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.company.brooklyn'
        version = '0.1'
        isSnapshot = true
    }
    tomcat {
        dir = "C:/tools/apache-tomcat"
    }
    
}

def mysql = 'mysql:mysql-connector-java:5.1.38'

configure([globalModule, coreModule, guiModule, webModule, webToolkitModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'eclipse')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }
    
    
}
configure(webThemesModule) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    appModuleType = 'web-themes'

    buildDir = file('../build/scss-themes')

    sourceSets {
        main {
            java {
                srcDir '.'
            }
            resources {
                srcDir '.'
            }
        }
    }
}


configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(mysql)
        testRuntime(mysql)

    }

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/app-core')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'app-core'
        appJars('app-global', 'app-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        connectionParams = '?useSSL=false&allowMultiQueries=true'
        dbms = 'mysql'
        host = 'ec2-35-167-235-161.us-west-2.compute.amazonaws.com'
        dbName = 'brooklyn'
        dbUser = 'mdji'
        dbPassword = 'Mdji1882!'
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        connectionParams = '?useSSL=false&allowMultiQueries=true'
        dbms = 'mysql'
        host = 'ec2-35-167-235-161.us-west-2.compute.amazonaws.com'
        dbName = 'brooklyn'
        dbUser = 'mdji'
        dbPassword = 'Mdji1882!'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/company/brooklyn/**"
        into "$cuba.tomcat.dir/conf/app"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)

    }
    
    jar {
        with copySpec {
            from sourceSets.main.allJava
            include "com/company/brooklyn/web/toolkit/ui/client/**"
        }
    }
    
    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/company/brooklyn/**"
        into "$cuba.tomcat.dir/conf/app"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'app'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/app')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'app'
        appJars('app-global', 'app-gui', 'app-web')
    }
    task buildScssThemes(type: CubaWebScssThemeCreation)
    task deployThemes(type: CubaDeployThemeTask, dependsOn: buildScssThemes)
    assemble.dependsOn buildScssThemes
}

configure(webToolkitModule) {
    dependencies {
        compile(webModule)


    }
    
    jar {
        from sourceSets.main.allJava
    }
    
    task buildWidgetSet(type: CubaWidgetSetBuilding) {
        widgetSetClass = 'com.company.brooklyn.web.toolkit.ui.AppWidgetSet'
    }
    
    task debugWidgetSet(type: CubaWidgetSetDebug) {
        widgetSetClass = 'com.company.brooklyn.web.toolkit.ui.AppWidgetSet'
    } 

    task webArchive(dependsOn: buildWidgetSet, type: Zip) {
        from file("$buildDir/web")
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deploy(dependsOn: buildWidgetSet) << {
        delete {
            "$cuba.tomcat.dir/webapps/app/VAADIN/widgetsets"
        }
        copy {
            from "$buildDir/web"
            into "$cuba.tomcat.dir/webapps/app"
        }
    }
}





task undeploy(type: Delete, dependsOn: ':app-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/app-core")
    delete("$cuba.tomcat.dir/webapps/app")
}

task restart(dependsOn: ['stop', ':app-core:deploy', ':app-web:deploy', ':app-web-toolkit:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

apply from: 'extra.gradle'

task buildWar(type: CubaWarBuilding) {
    appHome = './app'
    includeContextXml = true
    webXmlPath = 'modules/web/web/WEB-INF/single-war-web.xml'
    coreContextXmlPath = 'modules/core/web/META-INF/production-context.xml'
    appProperties = ['cuba.automaticDatabaseUpdate' : true]
    includeJdbcDriver = true
    
}




